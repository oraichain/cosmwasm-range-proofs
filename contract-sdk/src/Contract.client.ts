/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.28.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import {Addr, Binary, Boolean} from "./types";
import {InstantiateMsg, ExecuteMsg, QueryMsg} from "./Contract.types";
export interface ContractReadOnlyInterface {
  contractAddress: string;
  verifyProof: ({
    challenge,
    commitment,
    proofRaw
  }: {
    challenge: Binary;
    commitment: Binary;
    proofRaw: Binary;
  }) => Promise<Boolean>;
}
export class ContractQueryClient implements ContractReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.verifyProof = this.verifyProof.bind(this);
  }

  verifyProof = async ({
    challenge,
    commitment,
    proofRaw
  }: {
    challenge: Binary;
    commitment: Binary;
    proofRaw: Binary;
  }): Promise<Boolean> => {
    return this.client.queryContractSmart(this.contractAddress, {
      verify_proof: {
        challenge,
        commitment,
        proof_raw: proofRaw
      }
    });
  };
}
export interface ContractInterface extends ContractReadOnlyInterface {
  contractAddress: string;
  sender: string;
  setOwner: ({
    newOwner
  }: {
    newOwner: Addr;
  }, $fee?: number | StdFee | "auto", $memo?: string, $funds?: Coin[]) => Promise<ExecuteResult>;
}
export class ContractClient extends ContractQueryClient implements ContractInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.setOwner = this.setOwner.bind(this);
  }

  setOwner = async ({
    newOwner
  }: {
    newOwner: Addr;
  }, $fee: number | StdFee | "auto" = "auto", $memo?: string, $funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_owner: {
        new_owner: newOwner
      }
    }, $fee, $memo, $funds);
  };
}